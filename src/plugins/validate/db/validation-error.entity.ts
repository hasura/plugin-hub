// src/plugins/validate/db/validation-error.entity.ts
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn, Index } from 'typeorm';
import { ValidationRun } from './validation-run.entity.js'; // Keep for TYPE HINT only

@Entity({
    schema: 'data_quality',
    // Explicit snake_case name (workaround for generate issue)
    name: 'validation_error',
    comment: 'Stores details for a single data quality validation error identified during a validation run.'
})
export class ValidationError {
    @PrimaryGeneratedColumn({
        name: 'validation_error_id',
        comment: 'Unique identifier for the validation error record.'
    })
    validation_error_id!: number;

    // Foreign key column - TypeORM manages this via @ManyToOne and @JoinColumn below
    // We still define the column itself explicitly for clarity and indexing
    @Column({
        type: 'integer', // Explicit type for number | null (though FK is non-null here)
        name: 'validation_run_id', // Matches JoinColumn name
        comment: 'Foreign key linking to the specific validation run (validation_run table) where this error occurred.'
    })
    @Index() // Index for faster lookups/joins
    validation_run_id!: number; // FK is not nullable based on relation

    @Column({
        type: 'text', // Explicit type
        name: 'instance_path',
        comment: 'JSON path within the validated data pointing to the element that failed validation.'
    })
    instance_path!: string;

    @Column({
        type: 'text', // Explicit type
        name: 'schema_path',
        comment: 'JSON path within the validation schema pointing to the rule/keyword that failed.'
    })
    schema_path!: string;

    @Column({
        type: 'varchar', // Explicit type
        name: 'error_keyword',
        length: 100,
        comment: 'The specific JSON schema keyword (e.g., type, required, pattern) that triggered the validation failure.'
    })
    error_keyword!: string;

    @Column({
        type: 'text', // Explicit type
        name: 'error_message',
        comment: 'The human-readable error message generated by the validator.'
    })
    error_message!: string;

    @Column({
        type: 'text', // Explicit type
        name: 'failed_data',
        nullable: true,
        comment: 'String representation of the actual data value that failed the validation rule.'
    })
    failed_data!: string | null;

    @Column({
        type: 'text', // Explicit type
        name: 'error_params',
        nullable: true,
        comment: 'Parameters associated with the failed validation keyword (e.g., allowed values for enum), stored as a JSON string.'
    })
    error_params!: string | null;

    @Column({
        type: 'text', // Explicit type
        name: 'error_schema_detail',
        nullable: true,
        comment: 'The specific part of the JSON schema definition that failed, stored as a JSON string.'
    })
    error_schema_detail!: string | null;

    @Column({
        type: 'text', // Explicit type
        name: 'error_parent_schema_detail',
        nullable: true,
        comment: 'The parent schema object containing the failed rule, stored as a JSON string.'
    })
    error_parent_schema_detail!: string | null;

    /**
     * Relation to the parent ValidationRun record.
     */
    @ManyToOne('validation_run', (run: ValidationRun) => run.errors, {
        onDelete: 'CASCADE', // Automatically delete errors if the parent run is deleted
        nullable: false // An error MUST belong to a run
    })
    @JoinColumn({ name: 'validation_run_id' }) // Specifies the foreign key column name
    run!: ValidationRun;
}